//
// Copyright (c) 2025 Nutanix Inc. All rights reserved.
//
// Author: vaibhav.sanap@nutanix.com

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/stargate_vdisk_rpc_svc.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StargateVDiskRpcSvc_VDiskStreamWrite_FullMethodName = "/StargateVDiskRpcSvc/VDiskStreamWrite"
	StargateVDiskRpcSvc_VDiskStreamRead_FullMethodName  = "/StargateVDiskRpcSvc/VDiskStreamRead"
)

// StargateVDiskRpcSvcClient is the client API for StargateVDiskRpcSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StargateVDiskRpcSvcClient interface {
	// Writes data to a vdisk at a specific offset using streaming.
	VDiskStreamWrite(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VDiskWriteArg, VDiskWriteRet], error)
	// Reads data from a vdisk starting at a specific offset using streaming.
	VDiskStreamRead(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VDiskReadArg, VDiskReadRet], error)
}

type stargateVDiskRpcSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewStargateVDiskRpcSvcClient(cc grpc.ClientConnInterface) StargateVDiskRpcSvcClient {
	return &stargateVDiskRpcSvcClient{cc}
}

func (c *stargateVDiskRpcSvcClient) VDiskStreamWrite(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VDiskWriteArg, VDiskWriteRet], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StargateVDiskRpcSvc_ServiceDesc.Streams[0], StargateVDiskRpcSvc_VDiskStreamWrite_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VDiskWriteArg, VDiskWriteRet]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StargateVDiskRpcSvc_VDiskStreamWriteClient = grpc.BidiStreamingClient[VDiskWriteArg, VDiskWriteRet]

func (c *stargateVDiskRpcSvcClient) VDiskStreamRead(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VDiskReadArg, VDiskReadRet], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StargateVDiskRpcSvc_ServiceDesc.Streams[1], StargateVDiskRpcSvc_VDiskStreamRead_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VDiskReadArg, VDiskReadRet]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StargateVDiskRpcSvc_VDiskStreamReadClient = grpc.BidiStreamingClient[VDiskReadArg, VDiskReadRet]

// StargateVDiskRpcSvcServer is the server API for StargateVDiskRpcSvc service.
// All implementations must embed UnimplementedStargateVDiskRpcSvcServer
// for forward compatibility.
type StargateVDiskRpcSvcServer interface {
	// Writes data to a vdisk at a specific offset using streaming.
	VDiskStreamWrite(grpc.BidiStreamingServer[VDiskWriteArg, VDiskWriteRet]) error
	// Reads data from a vdisk starting at a specific offset using streaming.
	VDiskStreamRead(grpc.BidiStreamingServer[VDiskReadArg, VDiskReadRet]) error
	mustEmbedUnimplementedStargateVDiskRpcSvcServer()
}

// UnimplementedStargateVDiskRpcSvcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStargateVDiskRpcSvcServer struct{}

func (UnimplementedStargateVDiskRpcSvcServer) VDiskStreamWrite(grpc.BidiStreamingServer[VDiskWriteArg, VDiskWriteRet]) error {
	return status.Errorf(codes.Unimplemented, "method VDiskStreamWrite not implemented")
}
func (UnimplementedStargateVDiskRpcSvcServer) VDiskStreamRead(grpc.BidiStreamingServer[VDiskReadArg, VDiskReadRet]) error {
	return status.Errorf(codes.Unimplemented, "method VDiskStreamRead not implemented")
}
func (UnimplementedStargateVDiskRpcSvcServer) mustEmbedUnimplementedStargateVDiskRpcSvcServer() {}
func (UnimplementedStargateVDiskRpcSvcServer) testEmbeddedByValue()                             {}

// UnsafeStargateVDiskRpcSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StargateVDiskRpcSvcServer will
// result in compilation errors.
type UnsafeStargateVDiskRpcSvcServer interface {
	mustEmbedUnimplementedStargateVDiskRpcSvcServer()
}

func RegisterStargateVDiskRpcSvcServer(s grpc.ServiceRegistrar, srv StargateVDiskRpcSvcServer) {
	// If the following call pancis, it indicates UnimplementedStargateVDiskRpcSvcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StargateVDiskRpcSvc_ServiceDesc, srv)
}

func _StargateVDiskRpcSvc_VDiskStreamWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StargateVDiskRpcSvcServer).VDiskStreamWrite(&grpc.GenericServerStream[VDiskWriteArg, VDiskWriteRet]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StargateVDiskRpcSvc_VDiskStreamWriteServer = grpc.BidiStreamingServer[VDiskWriteArg, VDiskWriteRet]

func _StargateVDiskRpcSvc_VDiskStreamRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StargateVDiskRpcSvcServer).VDiskStreamRead(&grpc.GenericServerStream[VDiskReadArg, VDiskReadRet]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StargateVDiskRpcSvc_VDiskStreamReadServer = grpc.BidiStreamingServer[VDiskReadArg, VDiskReadRet]

// StargateVDiskRpcSvc_ServiceDesc is the grpc.ServiceDesc for StargateVDiskRpcSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StargateVDiskRpcSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StargateVDiskRpcSvc",
	HandlerType: (*StargateVDiskRpcSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VDiskStreamWrite",
			Handler:       _StargateVDiskRpcSvc_VDiskStreamWrite_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "VDiskStreamRead",
			Handler:       _StargateVDiskRpcSvc_VDiskStreamRead_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/stargate_vdisk_rpc_svc.proto",
}
