//
// Copyright (c) 2025 Nutanix Inc. All rights reserved.
//
// Author: vaibhav.sanap@nutanix.com

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: protos/stargate_vdisk_rpc_svc.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Compression types supported
type CompressionType int32

const (
	CompressionType_kNoCompression     CompressionType = 0
	CompressionType_kLZ4Compression    CompressionType = 1
	CompressionType_kSnappyCompression CompressionType = 2
	CompressionType_kZlibCompression   CompressionType = 3
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "kNoCompression",
		1: "kLZ4Compression",
		2: "kSnappyCompression",
		3: "kZlibCompression",
	}
	CompressionType_value = map[string]int32{
		"kNoCompression":     0,
		"kLZ4Compression":    1,
		"kSnappyCompression": 2,
		"kZlibCompression":   3,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_stargate_vdisk_rpc_svc_proto_enumTypes[0].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_protos_stargate_vdisk_rpc_svc_proto_enumTypes[0]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompressionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompressionType(num)
	return nil
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_protos_stargate_vdisk_rpc_svc_proto_rawDescGZIP(), []int{0}
}

// Checksum types supported
type ChecksumType int32

const (
	ChecksumType_kNoChecksum ChecksumType = 0
	ChecksumType_kCRC32      ChecksumType = 1
	ChecksumType_kSHA1       ChecksumType = 2
	ChecksumType_kSHA256     ChecksumType = 3
)

// Enum value maps for ChecksumType.
var (
	ChecksumType_name = map[int32]string{
		0: "kNoChecksum",
		1: "kCRC32",
		2: "kSHA1",
		3: "kSHA256",
	}
	ChecksumType_value = map[string]int32{
		"kNoChecksum": 0,
		"kCRC32":      1,
		"kSHA1":       2,
		"kSHA256":     3,
	}
)

func (x ChecksumType) Enum() *ChecksumType {
	p := new(ChecksumType)
	*p = x
	return p
}

func (x ChecksumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChecksumType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_stargate_vdisk_rpc_svc_proto_enumTypes[1].Descriptor()
}

func (ChecksumType) Type() protoreflect.EnumType {
	return &file_protos_stargate_vdisk_rpc_svc_proto_enumTypes[1]
}

func (x ChecksumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChecksumType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChecksumType(num)
	return nil
}

// Deprecated: Use ChecksumType.Descriptor instead.
func (ChecksumType) EnumDescriptor() ([]byte, []int) {
	return file_protos_stargate_vdisk_rpc_svc_proto_rawDescGZIP(), []int{1}
}

// Disk recovery point information
type DiskRecoveryPoint struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RecoveryPointUuid *string                `protobuf:"bytes,1,opt,name=recovery_point_uuid,json=recoveryPointUuid" json:"recovery_point_uuid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DiskRecoveryPoint) Reset() {
	*x = DiskRecoveryPoint{}
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskRecoveryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskRecoveryPoint) ProtoMessage() {}

func (x *DiskRecoveryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskRecoveryPoint.ProtoReflect.Descriptor instead.
func (*DiskRecoveryPoint) Descriptor() ([]byte, []int) {
	return file_protos_stargate_vdisk_rpc_svc_proto_rawDescGZIP(), []int{0}
}

func (x *DiskRecoveryPoint) GetRecoveryPointUuid() string {
	if x != nil && x.RecoveryPointUuid != nil {
		return *x.RecoveryPointUuid
	}
	return ""
}

// Disk identifier with multiple ways to identify a disk
type DiskIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*DiskIdentifier_DiskRecoveryPoint
	//	*DiskIdentifier_VmDiskUuid
	//	*DiskIdentifier_VgDiskUuid
	Identifier    isDiskIdentifier_Identifier `protobuf_oneof:"identifier"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskIdentifier) Reset() {
	*x = DiskIdentifier{}
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskIdentifier) ProtoMessage() {}

func (x *DiskIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskIdentifier.ProtoReflect.Descriptor instead.
func (*DiskIdentifier) Descriptor() ([]byte, []int) {
	return file_protos_stargate_vdisk_rpc_svc_proto_rawDescGZIP(), []int{1}
}

func (x *DiskIdentifier) GetIdentifier() isDiskIdentifier_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *DiskIdentifier) GetDiskRecoveryPoint() *DiskRecoveryPoint {
	if x != nil {
		if x, ok := x.Identifier.(*DiskIdentifier_DiskRecoveryPoint); ok {
			return x.DiskRecoveryPoint
		}
	}
	return nil
}

func (x *DiskIdentifier) GetVmDiskUuid() string {
	if x != nil {
		if x, ok := x.Identifier.(*DiskIdentifier_VmDiskUuid); ok {
			return x.VmDiskUuid
		}
	}
	return ""
}

func (x *DiskIdentifier) GetVgDiskUuid() string {
	if x != nil {
		if x, ok := x.Identifier.(*DiskIdentifier_VgDiskUuid); ok {
			return x.VgDiskUuid
		}
	}
	return ""
}

type isDiskIdentifier_Identifier interface {
	isDiskIdentifier_Identifier()
}

type DiskIdentifier_DiskRecoveryPoint struct {
	DiskRecoveryPoint *DiskRecoveryPoint `protobuf:"bytes,1,opt,name=disk_recovery_point,json=diskRecoveryPoint,oneof"`
}

type DiskIdentifier_VmDiskUuid struct {
	VmDiskUuid string `protobuf:"bytes,2,opt,name=vm_disk_uuid,json=vmDiskUuid,oneof"`
}

type DiskIdentifier_VgDiskUuid struct {
	VgDiskUuid string `protobuf:"bytes,3,opt,name=vg_disk_uuid,json=vgDiskUuid,oneof"`
}

func (*DiskIdentifier_DiskRecoveryPoint) isDiskIdentifier_Identifier() {}

func (*DiskIdentifier_VmDiskUuid) isDiskIdentifier_Identifier() {}

func (*DiskIdentifier_VgDiskUuid) isDiskIdentifier_Identifier() {}

// Represents a range of data on disk
type DiskDataRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start offset of the range in the disk.
	Offset *int64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	// Length of the range in bytes.
	Length *int64 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	// If set to true, this range contains zero data.
	ZeroData      *bool `protobuf:"varint,3,opt,name=zero_data,json=zeroData" json:"zero_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskDataRange) Reset() {
	*x = DiskDataRange{}
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskDataRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskDataRange) ProtoMessage() {}

func (x *DiskDataRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskDataRange.ProtoReflect.Descriptor instead.
func (*DiskDataRange) Descriptor() ([]byte, []int) {
	return file_protos_stargate_vdisk_rpc_svc_proto_rawDescGZIP(), []int{2}
}

func (x *DiskDataRange) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *DiskDataRange) GetLength() int64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *DiskDataRange) GetZeroData() bool {
	if x != nil && x.ZeroData != nil {
		return *x.ZeroData
	}
	return false
}

// Request message for a read operation.
type VDiskReadArg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disk identifier
	DiskId *DiskIdentifier `protobuf:"bytes,1,req,name=disk_id,json=diskId" json:"disk_id,omitempty"`
	// Offset, if not set read from start
	Offset *int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// Length, if not set return whole disk data, with limit to max response size
	Length *int64 `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	// Maximum response size in bytes
	MaxResponseSize *int64 `protobuf:"varint,4,opt,name=max_response_size,json=maxResponseSize" json:"max_response_size,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VDiskReadArg) Reset() {
	*x = VDiskReadArg{}
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiskReadArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiskReadArg) ProtoMessage() {}

func (x *VDiskReadArg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiskReadArg.ProtoReflect.Descriptor instead.
func (*VDiskReadArg) Descriptor() ([]byte, []int) {
	return file_protos_stargate_vdisk_rpc_svc_proto_rawDescGZIP(), []int{3}
}

func (x *VDiskReadArg) GetDiskId() *DiskIdentifier {
	if x != nil {
		return x.DiskId
	}
	return nil
}

func (x *VDiskReadArg) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *VDiskReadArg) GetLength() int64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *VDiskReadArg) GetMaxResponseSize() int64 {
	if x != nil && x.MaxResponseSize != nil {
		return *x.MaxResponseSize
	}
	return 0
}

// Response message for a read operation.
type VDiskReadRet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of ranges being returned
	RangeVec []*DiskDataRange `protobuf:"bytes,1,rep,name=range_vec,json=rangeVec" json:"range_vec,omitempty"`
	// Actual data payload
	Data []byte `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	// Error message in case of failure
	ErrorMessage *string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Indicates if more data is available
	HasMoreData *bool `protobuf:"varint,4,opt,name=has_more_data,json=hasMoreData" json:"has_more_data,omitempty"`
	// Total size of the disk
	TotalDiskSize *int64 `protobuf:"varint,5,opt,name=total_disk_size,json=totalDiskSize" json:"total_disk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VDiskReadRet) Reset() {
	*x = VDiskReadRet{}
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiskReadRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiskReadRet) ProtoMessage() {}

func (x *VDiskReadRet) ProtoReflect() protoreflect.Message {
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiskReadRet.ProtoReflect.Descriptor instead.
func (*VDiskReadRet) Descriptor() ([]byte, []int) {
	return file_protos_stargate_vdisk_rpc_svc_proto_rawDescGZIP(), []int{4}
}

func (x *VDiskReadRet) GetRangeVec() []*DiskDataRange {
	if x != nil {
		return x.RangeVec
	}
	return nil
}

func (x *VDiskReadRet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VDiskReadRet) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *VDiskReadRet) GetHasMoreData() bool {
	if x != nil && x.HasMoreData != nil {
		return *x.HasMoreData
	}
	return false
}

func (x *VDiskReadRet) GetTotalDiskSize() int64 {
	if x != nil && x.TotalDiskSize != nil {
		return *x.TotalDiskSize
	}
	return 0
}

// Request message for a write operation
type VDiskWriteArg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disk identifier
	DiskId *DiskIdentifier `protobuf:"bytes,1,req,name=disk_id,json=diskId" json:"disk_id,omitempty"`
	// List of ranges to write
	RangeVec []*DiskDataRange `protobuf:"bytes,2,rep,name=range_vec,json=rangeVec" json:"range_vec,omitempty"`
	// Compression type used for data
	CompressionType *CompressionType `protobuf:"varint,3,opt,name=compression_type,json=compressionType,enum=CompressionType" json:"compression_type,omitempty"`
	// Checksum type used for data verification
	ChecksumType *ChecksumType `protobuf:"varint,4,opt,name=checksum_type,json=checksumType,enum=ChecksumType" json:"checksum_type,omitempty"`
	// Data to be written to the disk. The data payload here should be a
	// concatenation of data corresponding to each non-zero range.
	Data []byte `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	// Checksum value for data verification
	Checksum *uint32 `protobuf:"varint,6,opt,name=checksum" json:"checksum,omitempty"`
	// Sequence number for ordering writes
	SequenceNumber *int64 `protobuf:"varint,7,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VDiskWriteArg) Reset() {
	*x = VDiskWriteArg{}
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiskWriteArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiskWriteArg) ProtoMessage() {}

func (x *VDiskWriteArg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiskWriteArg.ProtoReflect.Descriptor instead.
func (*VDiskWriteArg) Descriptor() ([]byte, []int) {
	return file_protos_stargate_vdisk_rpc_svc_proto_rawDescGZIP(), []int{5}
}

func (x *VDiskWriteArg) GetDiskId() *DiskIdentifier {
	if x != nil {
		return x.DiskId
	}
	return nil
}

func (x *VDiskWriteArg) GetRangeVec() []*DiskDataRange {
	if x != nil {
		return x.RangeVec
	}
	return nil
}

func (x *VDiskWriteArg) GetCompressionType() CompressionType {
	if x != nil && x.CompressionType != nil {
		return *x.CompressionType
	}
	return CompressionType_kNoCompression
}

func (x *VDiskWriteArg) GetChecksumType() ChecksumType {
	if x != nil && x.ChecksumType != nil {
		return *x.ChecksumType
	}
	return ChecksumType_kNoChecksum
}

func (x *VDiskWriteArg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VDiskWriteArg) GetChecksum() uint32 {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return 0
}

func (x *VDiskWriteArg) GetSequenceNumber() int64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

// Response message for a write operation
type VDiskWriteRet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates whether the write was successful
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// For correlating between request and response
	Offset *int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// For correlating between request and response
	Length *int64 `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	// Error message in case of failure
	ErrorMessage *string `protobuf:"bytes,4,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Sequence number from the request
	SequenceNumber *int64 `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	// Bytes actually written
	BytesWritten  *int64 `protobuf:"varint,6,opt,name=bytes_written,json=bytesWritten" json:"bytes_written,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VDiskWriteRet) Reset() {
	*x = VDiskWriteRet{}
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VDiskWriteRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VDiskWriteRet) ProtoMessage() {}

func (x *VDiskWriteRet) ProtoReflect() protoreflect.Message {
	mi := &file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VDiskWriteRet.ProtoReflect.Descriptor instead.
func (*VDiskWriteRet) Descriptor() ([]byte, []int) {
	return file_protos_stargate_vdisk_rpc_svc_proto_rawDescGZIP(), []int{6}
}

func (x *VDiskWriteRet) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *VDiskWriteRet) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *VDiskWriteRet) GetLength() int64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *VDiskWriteRet) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *VDiskWriteRet) GetSequenceNumber() int64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *VDiskWriteRet) GetBytesWritten() int64 {
	if x != nil && x.BytesWritten != nil {
		return *x.BytesWritten
	}
	return 0
}

var File_protos_stargate_vdisk_rpc_svc_proto protoreflect.FileDescriptor

const file_protos_stargate_vdisk_rpc_svc_proto_rawDesc = "" +
	"\n" +
	"#protos/stargate_vdisk_rpc_svc.proto\"C\n" +
	"\x11DiskRecoveryPoint\x12.\n" +
	"\x13recovery_point_uuid\x18\x01 \x01(\tR\x11recoveryPointUuid\"\xac\x01\n" +
	"\x0eDiskIdentifier\x12D\n" +
	"\x13disk_recovery_point\x18\x01 \x01(\v2\x12.DiskRecoveryPointH\x00R\x11diskRecoveryPoint\x12\"\n" +
	"\fvm_disk_uuid\x18\x02 \x01(\tH\x00R\n" +
	"vmDiskUuid\x12\"\n" +
	"\fvg_disk_uuid\x18\x03 \x01(\tH\x00R\n" +
	"vgDiskUuidB\f\n" +
	"\n" +
	"identifier\"\\\n" +
	"\rDiskDataRange\x12\x16\n" +
	"\x06offset\x18\x01 \x01(\x03R\x06offset\x12\x16\n" +
	"\x06length\x18\x02 \x01(\x03R\x06length\x12\x1b\n" +
	"\tzero_data\x18\x03 \x01(\bR\bzeroData\"\x94\x01\n" +
	"\fVDiskReadArg\x12(\n" +
	"\adisk_id\x18\x01 \x02(\v2\x0f.DiskIdentifierR\x06diskId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x16\n" +
	"\x06length\x18\x03 \x01(\x03R\x06length\x12*\n" +
	"\x11max_response_size\x18\x04 \x01(\x03R\x0fmaxResponseSize\"\xc0\x01\n" +
	"\fVDiskReadRet\x12+\n" +
	"\trange_vec\x18\x01 \x03(\v2\x0e.DiskDataRangeR\brangeVec\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\x12\"\n" +
	"\rhas_more_data\x18\x04 \x01(\bR\vhasMoreData\x12&\n" +
	"\x0ftotal_disk_size\x18\x05 \x01(\x03R\rtotalDiskSize\"\xb0\x02\n" +
	"\rVDiskWriteArg\x12(\n" +
	"\adisk_id\x18\x01 \x02(\v2\x0f.DiskIdentifierR\x06diskId\x12+\n" +
	"\trange_vec\x18\x02 \x03(\v2\x0e.DiskDataRangeR\brangeVec\x12;\n" +
	"\x10compression_type\x18\x03 \x01(\x0e2\x10.CompressionTypeR\x0fcompressionType\x122\n" +
	"\rchecksum_type\x18\x04 \x01(\x0e2\r.ChecksumTypeR\fchecksumType\x12\x12\n" +
	"\x04data\x18\x05 \x01(\fR\x04data\x12\x1a\n" +
	"\bchecksum\x18\x06 \x01(\rR\bchecksum\x12'\n" +
	"\x0fsequence_number\x18\a \x01(\x03R\x0esequenceNumber\"\xcc\x01\n" +
	"\rVDiskWriteRet\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x16\n" +
	"\x06length\x18\x03 \x01(\x03R\x06length\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\x12'\n" +
	"\x0fsequence_number\x18\x05 \x01(\x03R\x0esequenceNumber\x12#\n" +
	"\rbytes_written\x18\x06 \x01(\x03R\fbytesWritten*h\n" +
	"\x0fCompressionType\x12\x12\n" +
	"\x0ekNoCompression\x10\x00\x12\x13\n" +
	"\x0fkLZ4Compression\x10\x01\x12\x16\n" +
	"\x12kSnappyCompression\x10\x02\x12\x14\n" +
	"\x10kZlibCompression\x10\x03*C\n" +
	"\fChecksumType\x12\x0f\n" +
	"\vkNoChecksum\x10\x00\x12\n" +
	"\n" +
	"\x06kCRC32\x10\x01\x12\t\n" +
	"\x05kSHA1\x10\x02\x12\v\n" +
	"\akSHA256\x10\x032\x82\x01\n" +
	"\x13StargateVDiskRpcSvc\x126\n" +
	"\x10VDiskStreamWrite\x12\x0e.VDiskWriteArg\x1a\x0e.VDiskWriteRet(\x010\x01\x123\n" +
	"\x0fVDiskStreamRead\x12\r.VDiskReadArg\x1a\r.VDiskReadRet(\x010\x01B8Z6github.com/vaibhav-ntnx/grpc-data-api-go-client/protos"

var (
	file_protos_stargate_vdisk_rpc_svc_proto_rawDescOnce sync.Once
	file_protos_stargate_vdisk_rpc_svc_proto_rawDescData []byte
)

func file_protos_stargate_vdisk_rpc_svc_proto_rawDescGZIP() []byte {
	file_protos_stargate_vdisk_rpc_svc_proto_rawDescOnce.Do(func() {
		file_protos_stargate_vdisk_rpc_svc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protos_stargate_vdisk_rpc_svc_proto_rawDesc), len(file_protos_stargate_vdisk_rpc_svc_proto_rawDesc)))
	})
	return file_protos_stargate_vdisk_rpc_svc_proto_rawDescData
}

var file_protos_stargate_vdisk_rpc_svc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_stargate_vdisk_rpc_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_protos_stargate_vdisk_rpc_svc_proto_goTypes = []any{
	(CompressionType)(0),      // 0: CompressionType
	(ChecksumType)(0),         // 1: ChecksumType
	(*DiskRecoveryPoint)(nil), // 2: DiskRecoveryPoint
	(*DiskIdentifier)(nil),    // 3: DiskIdentifier
	(*DiskDataRange)(nil),     // 4: DiskDataRange
	(*VDiskReadArg)(nil),      // 5: VDiskReadArg
	(*VDiskReadRet)(nil),      // 6: VDiskReadRet
	(*VDiskWriteArg)(nil),     // 7: VDiskWriteArg
	(*VDiskWriteRet)(nil),     // 8: VDiskWriteRet
}
var file_protos_stargate_vdisk_rpc_svc_proto_depIdxs = []int32{
	2, // 0: DiskIdentifier.disk_recovery_point:type_name -> DiskRecoveryPoint
	3, // 1: VDiskReadArg.disk_id:type_name -> DiskIdentifier
	4, // 2: VDiskReadRet.range_vec:type_name -> DiskDataRange
	3, // 3: VDiskWriteArg.disk_id:type_name -> DiskIdentifier
	4, // 4: VDiskWriteArg.range_vec:type_name -> DiskDataRange
	0, // 5: VDiskWriteArg.compression_type:type_name -> CompressionType
	1, // 6: VDiskWriteArg.checksum_type:type_name -> ChecksumType
	7, // 7: StargateVDiskRpcSvc.VDiskStreamWrite:input_type -> VDiskWriteArg
	5, // 8: StargateVDiskRpcSvc.VDiskStreamRead:input_type -> VDiskReadArg
	8, // 9: StargateVDiskRpcSvc.VDiskStreamWrite:output_type -> VDiskWriteRet
	6, // 10: StargateVDiskRpcSvc.VDiskStreamRead:output_type -> VDiskReadRet
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_protos_stargate_vdisk_rpc_svc_proto_init() }
func file_protos_stargate_vdisk_rpc_svc_proto_init() {
	if File_protos_stargate_vdisk_rpc_svc_proto != nil {
		return
	}
	file_protos_stargate_vdisk_rpc_svc_proto_msgTypes[1].OneofWrappers = []any{
		(*DiskIdentifier_DiskRecoveryPoint)(nil),
		(*DiskIdentifier_VmDiskUuid)(nil),
		(*DiskIdentifier_VgDiskUuid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protos_stargate_vdisk_rpc_svc_proto_rawDesc), len(file_protos_stargate_vdisk_rpc_svc_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_stargate_vdisk_rpc_svc_proto_goTypes,
		DependencyIndexes: file_protos_stargate_vdisk_rpc_svc_proto_depIdxs,
		EnumInfos:         file_protos_stargate_vdisk_rpc_svc_proto_enumTypes,
		MessageInfos:      file_protos_stargate_vdisk_rpc_svc_proto_msgTypes,
	}.Build()
	File_protos_stargate_vdisk_rpc_svc_proto = out.File
	file_protos_stargate_vdisk_rpc_svc_proto_goTypes = nil
	file_protos_stargate_vdisk_rpc_svc_proto_depIdxs = nil
}
